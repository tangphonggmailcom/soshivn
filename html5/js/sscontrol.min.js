// Generated by CoffeeScript 1.12.7
(function() {
  if (scormScoreKind) {
    document.write("<script type='text/javascript' src='./flipper3js/scorm_score/InitScript_m.js'></scr" + "ipt>");
  } else {

  }

  $(window).on('load', function() {
    if (scormScoreKind) {
      return this.SSControlWrapper.init();
    }
  });

  this.SSControlWrapper = (function() {
    function SSControlWrapper() {}

    SSControlWrapper.ssController = null;

    SSControlWrapper.isInit = false;

    SSControlWrapper.tmpSendPage = '';

    SSControlWrapper.beforeSendPage = '';

    SSControlWrapper.SSConfirmStartPageMessage = '';

    SSControlWrapper.words = {};

    SSControlWrapper.initTimeoutTimer;

    SSControlWrapper.init = function() {
      if (scormScoreKind) {
        SSControlWrapper.ssController = new flipperjs.ScormAndScoreController();
        SSControlWrapper.ssController.onCompletedBrowsedPage = SSControlWrapper.handleCompleteBrowsePage;
        SSControlWrapper.ssController.onCompletedContent = SSControlWrapper.handleCompleteContent;
        SSControlWrapper.ssController.onInitialized = SSControlWrapper.handleSSControllerInit;
        SSControlWrapper.ssController.init(scormScoreKind, './scormScoreSetting.xml');
        return SSControlWrapper.initTimeoutTimer = setTimeout(function() {
          return alert('Initialize timed out.');
        }, 10000);
      } else {
        return SSControlWrapper.initializeFlipper();
      }
    };

    SSControlWrapper.handleSSControllerInit = function() {
      var c, lastPageNo;
      clearTimeout(SSControlWrapper.initTimeoutTimer);
      if (SSControlWrapper.ssController.getInitializedFlg()) {
        lastPageNo = parseInt(SSControlWrapper.ssController.getData('lastPageNo', 10));
        if (isNaN(lastPageNo)) {
          return SSControlWrapper.initializeFlipper();
        } else {
          c = new Date / 1000 | 0;
          return $.ajax({
            type: 'GET',
            url: flipper.bookpath + 'book.xml?c=' + c,
            dataType: 'xml',
            data: {},
            success: function(xml) {
              var language, url;
              language = $(xml).find('data').find('language').text();
              language = (language != null) && language !== '' ? language : 'ja';
              if (language === 'other') {
                url = flipper.bookpath + 'html5custom/language-custom.xml?c=' + c;
              } else {
                url = flipper.bookpath + 'html5/language-' + language + '.xml?c=' + c;
              }
              return $.ajax({
                type: 'GET',
                url: url,
                dataType: 'xml',
                data: {},
                success: function(xml) {
                  return $(xml).find('text').each(function(i) {
                    SSControlWrapper.words[$(this).attr('name')] = $(this).text();
                    if ($(this).attr('name') === 'SSConfirmStartPage') {
                      return SSControlWrapper.SSConfirmStartPageMessage = $(this).text();
                    }
                  });
                },
                error: function(XMLHttpRequest, textStatus, errorThrown) {},
                complete: function(XMLHttpRequest, textStatus) {
                  return SSControlWrapper.handleSettingXml();
                }
              });
            },
            error: function(XMLHttpRequest, textStatus, errorThrown) {},
            complete: function(XMLHttpRequest, textStatus) {}
          });
        }
      } else {
        return SSControlWrapper.handleSettingXml();
      }
    };

    SSControlWrapper.handleSettingXml = function() {
      var lastPageNo;
      if (this.ssController) {
        lastPageNo = parseInt(this.ssController.getData('lastPageNo', 10));
        if (window.confirm(this.SSConfirmStartPageMessage)) {

        } else {
          lastPageNo = -1;
        }
      } else {
        lastPageNo = -1;
      }
      return flipper.$emit('init', {
        scormScoreType: scormScoreKind,
        scormScoreStartPage: lastPageNo
      });
    };

    SSControlWrapper.initializeFlipper = function() {
      return flipper.$emit('init', {
        scormScoreType: scormScoreKind
      });
    };

    SSControlWrapper.flipperInit = function() {
      if (this.ssController) {
        this.ssController.setData('totalPageNum', flipper.pageTotal);
        if (flipper.view === 'slide') {
          return this.startDisplayPage([flipper.activePage]);
        } else {
          return this.startDisplayPage([flipper.activeLeftPage, flipper.activeRightPage]);
        }
      }
    };

    SSControlWrapper.flipperFlipStop = function(pages) {
      this.startDisplayPage(pages);
      return this.refreshCheckmark('page');
    };

    SSControlWrapper.startDisplayPage = function(pages) {
      if (this.tmpSendPage !== '') {
        this.endDisplayPageForce();
      } else {

      }
      this.tmpSendPage = pages;
      this.beforeSendPage = pages;
      if (this.ssController) {
        return this.ssController.startDisplayPage(pages);
      }
    };

    SSControlWrapper.endDisplayPage = function(pages) {
      if (this.ssController) {
        this.ssController.endDisplayPage(pages);
      }
      return this.tmpSendPage = '';
    };

    SSControlWrapper.endDisplayPageForce = function() {
      return this.endDisplayPage(this.tmpSendPage);
    };

    SSControlWrapper.pausePage = '';

    SSControlWrapper.endDisplayPagePause = function() {
      this.pausePage = this.tmpSendPage;
      return this.endDisplayPageForce();
    };

    SSControlWrapper.startDisplayPageResume = function() {
      return this.startDisplayPage(this.pausePage);
    };

    SSControlWrapper.startDisplayPageBefore = function() {
      if (this.beforeSendPage !== '') {
        return this.startDisplayPage(this.beforeSendPage);
      }
    };

    SSControlWrapper.refreshCheckmark = function(target) {
      if (target === 'page') {
        if (this.ssController) {
          return flipper.$emit('refreshCheckmark', this.ssController.getData('suspendData'));
        }
      } else if (target === 'thumbnail') {
        if (this.ssController) {
          return flipper.$emit('refreshCheckmark', this.ssController.getData('suspendData'));
        }
      } else {
        return alert('error');
      }
    };

    SSControlWrapper.handleCompleteBrowsePage = function(pages) {
      return SSControlWrapper.refreshCheckmark('page');
    };

    SSControlWrapper.handleCompleteContent = function(result) {
      var ref;
      result = (ref = result.toString().toLowerCase() === 'true') != null ? ref : {
        "true": false
      };
      if (result === true) {
        return window.alert(SSControlWrapper.words['SSCompleteContents']);
      } else {
        if (window.confirm(SSControlWrapper.words['SSCompleteContentsFail'])) {
          if (SSControlWrapper.ssController) {
            return SSControlWrapper.ssController.sendCompletedContentStatus();
          }
        } else {
          return window.alert(SSControlWrapper.words['SSCompleteNextTime']);
        }
      }
    };

    return SSControlWrapper;

  })();

}).call(this);
